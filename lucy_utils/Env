#!/bin/bash

Header

display_help() {
    echo "Usage: Env [OPTIONS]... [COMMAND]"
    echo
    echo "Options:"
    echo "  -h, --help      Show this help message"
    echo
    echo "Commands:"
    echo "  launch          Launch the LUCY environment in attached mode"
    echo "  up              Create and start the LUCY docker environment in detached mode"
    echo "  down            Stop and wipe the LUCY docker environment"
    echo "  start           Start the LUCY docker environment"
    echo "  stop            Stop the LUCY docker environment"
    echo "  attach          Attach to the LUCY docker environment"
}

dc_up() {
    $DOCKER_COMPOSE -f $LUCY_DOCKER/lucy_ros2_ws/$ROS_DISTRO/docker-compose.yml up -d
}

dc_down() {
    $DOCKER_COMPOSE down
}

dc_start() {
    $DOCKER_COMPOSE start
}

dc_stop() {
    $DOCKER_COMPOSE stop
}

dc_attach() {
    $DOCKER_COMPOSE exec lucy_ros2_ws bash
}



DOCKER=$(command -v docker 2> /dev/null)
if [[ $? -ne 0 ]]; then
    echo -e "\033[31mDocker is not installed. Please install Docker to use this script.\033[0m"
    exit 1
fi

DOCKER_COMPOSE=$(command -v docker-compose 2> /dev/null)
if [[ $? -ne 0 ]]; then
    echo -e "\033[31mDocker Compose is not installed. Please install Docker Compose to use this script.\033[0m"
    exit 1
fi
DOCKER_COMPOSE="$DOCKER_COMPOSE -f $LUCY_DOCKER/lucy_ros2_ws/$ROS_DISTRO/docker-compose.yml"

OPTIONS=":h"
LONGOPTS="help"
OPTS=$(getopt --name "$0" -o $OPTIONS -l $LONGOPTS -- "$@")
if [ $? -ne 0 ]; then
    display_help
    exit 1
fi



eval set -- "$OPTS"

while true; do
    case "$1" in
        -h|--help)
            display_help
            shift 1
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Invalid options: $1"
            display_help
            exit 1
            ;;
    esac
done

for arg in "$@"; do
    case "$arg" in
        launch)
            dc_up
            dc_attach
            break
            ;;
        up)
            dc_up
            break
            ;;
        down)
            dc_down
            break
            ;;
        start)
            dc_start
            break
            ;;
        down)
            dc_down
            break
            ;;
        attach)
            dc_attach
            break
            ;;
        *)
            echo "Invalid command: $arg"
            display_help
            exit 1
            ;;
    esac
done
